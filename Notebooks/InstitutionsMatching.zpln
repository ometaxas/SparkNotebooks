{
 "paragraphs": [
  {
   "text": "%spark.conf\n# It is strongly recommended to set SPARK_HOME explictly instead of using the embedded spark of Zeppelin. As the function of embedded spark of Zeppelin is limited and can only run in local mode.\nSPARK_HOME /home/ometaxas/Programs/spark-3.0.1-bin-hadoop3.2\n#com.github.haifengl:smile-scala_2.12:2.5.3,com.databricks:spark-xml_2.12:0.10.0,com.github.mrpowers:spark-stringmetric_2.12:0.3.0\n#spark.jars /home/ometaxas/Programs/spark-3.0.1-bin-hadoop3.2/plugins/rapids-4-spark_2.12-0.3.0.jar, /home/ometaxas/Programs/spark-3.0.1-bin-hadoop3.2/plugins/cudf-0.17-cuda10-1.jar\n\n#spark.sql.warehouse.dir /home/ometaxas/Programs/zeppelin-0.9.0-preview2-bin-all/spark-warehouse\n\nspark.serializer org.apache.spark.serializer.KryoSerializer\nspark.kryoserializer.buffer.max 1000M\nspark.driver.memory 95g\nspark.driver.maxResultSize 5g \n\n#spark.rapids.sql.concurrentGpuTasks=2\n#spark.rapids.sql.enabled true\n#spark.rapids.memory.pinnedPool.size 2G \n\n#spark.plugins com.nvidia.spark.SQLPlugin \n\n#spark.locality.wait 0s \n#spark.sql.files.maxPartitionBytes 512m \n#spark.sql.shuffle.partitions 100 \n#spark.executor.resource.gpu.amount=1\n\n\nSPARK_LOCAL_DIRS /media/ometaxas/nvme/spark\n#, /home/ometaxas/Programs/spark-3.0.1-bin-hadoop3.2/tmp\n                                             \n# /home/ometaxas/Programs/spark-3.0.1-bin-hadoop3.2/tmp,/media/datadisk/Datasets/Spark\n#,/media/datadisk/Datasets/Spark \n#/media/datadisk/Datasets/Spark\n\n# set executor memrory 110g\n# spark.executor.memory  60g\n\n\n# set executor number to be 6\n# spark.executor.instances  6\n\n\n# Uncomment the following line if you want to use yarn-cluster mode (It is recommended to use yarn-cluster mode after Zeppelin 0.8, as the driver will run on the remote host of yarn cluster which can mitigate memory pressure of zeppelin server)\n# master yarn-cluster\n\n# Uncomment the following line if you want to use yarn-client mode (It is not recommended to use it after 0.8. Because it would launch the driver in the same host of zeppelin server which will increase memory pressure of zeppelin server)\n# master yarn-client\n\n# Uncomment the following line to enable HiveContext, and also put hive-site.xml under SPARK_CONF_DIR\n# zeppelin.spark.useHiveContext true\n\n",
   "user": "anonymous",
   "dateUpdated": "2021-04-05T11:21:31+0300",
   "config": {
    "editorSetting": {
     "language": "scala",
     "editOnDblClick": false,
     "completionKey": "TAB",
     "completionSupport": true
    },
    "colWidth": 12.0,
    "editorMode": "ace/mode/scala",
    "fontSize": 9.0,
    "results": {},
    "enabled": true
   },
   "settings": {
    "params": {},
    "forms": {}
   },
   "apps": [],
   "runtimeInfos": {},
   "progressUpdateIntervalMs": 500.0,
   "jobName": "paragraph_1617610891651_1560840436",
   "id": "paragraph_1617610891651_1560840436",
   "dateCreated": "2021-04-05T11:21:31+0300",
   "dateStarted": "2021-04-05T11:21:31+0300",
   "dateFinished": "2021-04-05T11:21:31+0300",
   "status": "FINISHED"
  },
  {
   "title": "Read Initial file",
   "text": "%spark\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql.functions.countDistinct;\n\nval ORGS_HOME = \"/media/ometaxas/nvme/datasets/institutions\"\n\n/*\naffId: string (nullable = true)\n |-- magId: long (nullable = true)\n |-- gridId: string (nullable = true)\n |-- ringgoldId: string (nullable = true)\n |-- wikiIds: string (nullable = true)\n |-- isniIds: string (nullable = true)\n |-- rorIds: string (nullable = true)\n |-- fundrefIds: string (nullable = true)\n |-- name: string (nullable = true)\n |-- normalizedNames: string (nullable = true)\n |-- acronyms: string (nullable = true)\n |-- urls: string (nullable = true)\n |-- wikiPageUrls: string (nullable = true)\n |-- email: string (nullable = true)\n |-- city: string (nullable = true)\n |-- state: string (nullable = true)\n |-- postCode: string (nullable = true)\n |-- countryCode: string (nullable = true)\n |-- longitude: double (nullable = true)\n |-- latitude: double (nullable = true)\n |-- magRank: long (nullable = true)\n |-- paperCount: integer (nullable = true)\n |-- paperFamilyCount: integer (nullable = true)\n |-- citationCount: integer (nullable = true)\n */\nval institutionsTsvFilename = \"AffiliationsExtended.tsv\" \n                              \nval institutionsSchema = new StructType().\n                add(\"affId\", StringType, true).\n                add(\"magId\", LongType, false).\n                add(\"gridId\", StringType, true).                \n                add(\"ringgoldId\", StringType, true).\n                add(\"wikiIds\",StringType, true).\n                add(\"isniIds\",StringType, true).\n                add(\"rorIds\",StringType, true).\n                add(\"fundrefIds\", StringType, true).\n                add(\"name\", StringType, true).\n                add(\"normalizedNames\", StringType, true).\n                add(\"acronyms\", StringType, true).\n                add(\"urls\", StringType, true).\n                add(\"wikiPageUrls\", StringType, true).\n                add(\"email\", StringType, true).\n                add(\"city\", StringType, true).\n                add(\"state\", StringType, true).\n                add(\"postCode\", StringType, true).\n                add(\"countryCode\", StringType, true).\n                add(\"longitude\", DoubleType, true).\n                add(\"latitude\", DoubleType, true).\n                add(\"magRank\", LongType, false).\n                add(\"paperCount\", LongType, false).\n                add(\"paperFamilyCount\", LongType, false).\n                add(\"citationCount\", LongType, false)\n\n                \nval institutionsdf = spark.read.options(Map(\"sep\"->\"\\t\", \"header\"-> \"false\")).\n                schema(institutionsSchema).\n                csv(s\"file://$ORGS_HOME/$institutionsTsvFilename\")\n    .withColumn(\"normalizedNamesArr\", split(col(\"normalizedNames\"),\"\\\\|\\\\|\"))\n    .withColumn(\"urlsArr\", split(regexp_replace(col(\"urls\"),\"(https?\\\\://)|/\",\"\"),\"\\\\|\\\\|\"))\n    .withColumn(\"wikiPageUrlsArr\", split(col(\"wikiPageUrls\"),\"\\\\|\\\\|\"))\n        .withColumn(\"acronymsArr\", split(col(\"acronyms\"),\"\\\\|\\\\|\"))\n.withColumn(\"fundrefIdsArr\", split(col(\"fundrefIds\"),\"\\\\|\\\\|\"))\n.withColumn(\"rorIdsArr\", split(col(\"rorIds\"),\"\\\\|\\\\|\"))\n.withColumn(\"wikiIdsArr\", split(col(\"wikiIds\"),\"\\\\|\\\\|\"))        \n.withColumn(\"wikiPageUrlsArr\", split(col(\"wikiPageUrls\"),\"\\\\|\\\\|\"))\n        .cache()\n\ninstitutionsdf.printSchema()",
   "user": "anonymous",
   "dateUpdated": "2021-04-05T11:21:36+0300",
   "config": {
    "title": true
   },
   "settings": {
    "params": {},
    "forms": {}
   },
   "apps": [],
   "runtimeInfos": {},
   "progressUpdateIntervalMs": 500.0,
   "jobName": "paragraph_1617610896042_636113427",
   "id": "paragraph_1617610896042_636113427",
   "dateCreated": "2021-04-05T11:21:36+0300",
   "dateStarted": "2021-04-05T11:21:36+0300",
   "dateFinished": "2021-04-05T11:21:43+0300",
   "status": "ERROR"
  },
  {
   "title": "Analyze problematic cases",
   "text": "%spark\n/*\ninstitutionsdf\n.filter( \n    //($\"normalizedNames\".contains(\"rio tinto\")    &&  $\"urls\".contains(\"riotinto.com\"))//            ||\n              array_contains($\"normalizedNamesArr\",\"university of paris\") ||\n    array_contains($\"normalizedNamesArr\",\"canon\") ||  \n    array_contains($\"normalizedNamesArr\",\"university of paris\") ||\n    array_contains($\"normalizedNamesArr\",\"oklahoma state university\") ||\n    array_contains($\"normalizedNamesArr\",\"rio tinto\") ||\n    array_contains($\"normalizedNamesArr\",\"mitsubishi electric\") ||\n    array_contains($\"normalizedNamesArr\",\"toyota\") ||\n    array_contains($\"normalizedNamesArr\",\"university of rennes\")  ||\n        array_contains($\"normalizedNamesArr\",\"world health organization\") \n            )\n        .show()\n        //.select(     $\"affId\", $\"magId\",$\"gridId\",$\"ringgoldId\",$\"wikiIds\",$\"rorIds\",$\"name\",$\"normalizedNames\",$\"urls\",$\"countryCode\", $\"wikiPageUrls\")\n//.coalesce(1).write.mode(\"overwrite\").options(Map(\"sep\"->\",\", \"header\"-> \"true\")).csv(s\"$ORGS_HOME/uniofParis.csv\")\n   //cases.coalesce(1).write.mode(\"overwrite\").options(Map(\"sep\"->\",\", \"header\"-> \"true\")).csv(s\"$ORGS_HOME/cases2.csv\")\n*/\n /*\nval unMatchedMAG = institutionsdf\n.filter(\n    ($\"gridId\"===\"\" || isnull($\"gridId\"))\n     && ($\"ringgoldId\"===\"\" || isnull($\"ringgoldId\"))        \n        &&  $\"magId\"=!=0 && !isnull($\"magId\")\n        \n            )        \n        .orderBy($\"paperCount\" desc)\n        .cache()\n\nunMatchedMAG.show(50)\nprintln(unMatchedMAG.count())\n*/\n\nval rin_grid = institutionsdf\n.filter(($\"gridId\"===\"\" || isnull($\"gridId\")) && \n        $\"ringgoldId\"=!=\"\" && !isnull($\"ringgoldId\") \n//&&  $\"magId\"=!=0 && !isnull($\"magId\")\n        &&  $\"wikiIds\"=!=\"\" && !isnull($\"wikiIds\")\n    //&& ($\"wikiIds\"===\"\" || isnull($\"wikiIds\"))\n        )\n        .cache()\n\nprintln(rin_grid.count())\nrin_grid.show(20)\n\n\n\n\nval grid_noRing = institutionsdf\n.filter(\n    $\"gridId\"=!=\"\" && !isnull($\"gridId\") \n        //&& \n   //$\"magId\"=!=0 && !isnull($\"magId\") \n        && ($\"ringgoldId\"===\"\" || isnull($\"ringgoldId\")) \n            )        \n        //.orderBy($\"paperCount\" desc)\n        .cache()\ngrid_noRing.show(true)\nprintln(grid_noRing.count())\n\n",
   "user": "anonymous",
   "dateUpdated": "2021-03-20T16:55:35+0200",
   "config": {
    "title": true,
    "results": [
     {}
    ]
   },
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {
       "state": {
        "currentPage": "Table",
        "table": {
         "visibleRow": 3.0
        },
        "chart": {
         "series": [
          {
           "type": "Line",
           "x": {
            "column": "affId",
            "index": 0.0
           },
           "y": {
            "column": "ringgoldId",
            "index": 3.0
           }
          }
         ]
        }
       }
      }
     }
    },
    "forms": {}
   },
   "apps": [],
   "runtimeInfos": {
    "jobUrl": {
     "propertyName": "jobUrl",
     "label": "SPARK JOB",
     "tooltip": "View in Spark web UI",
     "group": "spark",
     "values": [
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=31"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=32"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=33"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=34"
      }
     ],
     "interpreterSettingId": "spark"
    }
   },
   "progressUpdateIntervalMs": 500.0,
   "jobName": "paragraph_1616252135687_113900305",
   "id": "paragraph_1616252135687_113900305",
   "dateCreated": "2021-03-20T16:55:35+0200",
   "dateStarted": "2021-03-20T16:55:35+0200",
   "dateFinished": "2021-03-20T16:55:36+0200",
   "status": "FINISHED"
  },
  {
   "title": "Name based matching on GRID - Ringgold",
   "text": "%spark\n\nimport org.apache.spark.sql.functions._\n\nval grid_noRing = institutionsdf\n.filter(\n    ($\"gridId\"=!=\"\" && !isnull($\"gridId\") \n     && ($\"ringgoldId\"===\"\" || isnull($\"ringgoldId\")))    \n            //||    ($\"magId\"=!=0 && !isnull($\"magId\") \n        //&& ($\"ringgoldId\"===\"\" || isnull($\"ringgoldId\"))\n        //&& ($\"gridId\"===\"\" || isnull($\"gridId\"))) \n            )        \n        .orderBy($\"paperCount\" desc)\n        .cache()\n//grid_noRing.show(50)\nprintln(grid_noRing.count())\n\nval name_based_matchesall = institutionsdf.filter($\"gridId\"===\"\" || isnull($\"gridId\") ).as(\"df1\").join(broadcast(grid_noRing.as(\"df2\")),  \n    arrays_overlap($\"df1.normalizedNamesArr\",$\"df2.normalizedNamesArr\") && $\"df1.affId\" =!=$\"df2.affId\" \n            && arrays_overlap($\"df1.urlsArr\",$\"df2.urlsArr\") \n&& $\"df2.countryCode\" === $\"df1.countryCode\"\n    , \"inner\")\n .select( $\"df2.affId\".as(\"affId2\"), $\"df1.ringgoldId\".as(\"ringgoldId\"),$\"df2.gridId\".as(\"gridId\"),\n     when($\"df2.magId\"=!=0 && !isnull($\"df2.magId\"),$\"df2.magId\").otherwise($\"df1.magId\").as(\"magId\"),     \n     $\"df1.affId\".as(\"affId1\"),  $\"df2.name\".as(\"name\"), $\"df1.name\".as(\"name1\"),   \n     \n             array_union($\"df1.normalizedNamesArr\",$\"df2.normalizedNamesArr\").as(\"normalizedNamesArr\"),\n            array_union($\"df1.urlsArr\",$\"df2.urlsArr\").as(\"urlsArr\"),\n            array_union($\"df1.wikiPageUrlsArr\",$\"df2.wikiPageUrlsArr\").as(\"wikiPageUrlsArr\"),\n            array_union($\"df1.acronymsArr\",$\"df2.acronymsArr\").as(\"acronymsArr\"),\n        array_union($\"df1.fundrefIdsArr\",$\"df2.fundrefIdsArr\").as(\"fundrefIdsArr\"),\n        array_union($\"df1.rorIdsArr\",$\"df2.rorIdsArr\").as(\"rorIdsArr\"),\n        array_union($\"df1.wikiIdsArr\",$\"df2.wikiIdsArr\").as(\"wikiIdsArr\"),\n     when($\"df2.email\"=!=0 && !isnull($\"df2.email\"),$\"df2.email\").otherwise($\"df1.email\").as(\"email\"),\n     when($\"df2.city\"=!=0 && !isnull($\"df2.city\"),$\"df2.city\").otherwise($\"df1.city\").as(\"city\"),\n     when($\"df2.state\"=!=0 && !isnull($\"df2.state\"),$\"df2.state\").otherwise($\"df1.state\").as(\"state\"),\n     $\"df2.countryCode\".as(\"countryCode\"),\n     when($\"df2.postCode\"=!=0 && !isnull($\"df2.postCode\"),$\"df2.postCode\").otherwise($\"df1.postCode\").as(\"postCode\"),\n     when($\"df2.latitude\"=!=0 && !isnull($\"df2.latitude\"),$\"df2.latitude\").otherwise($\"df1.latitude\").as(\"latitude\"),\n     when($\"df2.longitude\"=!=0 && !isnull($\"df2.longitude\"),$\"df2.longitude\").otherwise($\"df1.longitude\").as(\"longitude\"),\n     when($\"df2.papercount\"=!=0 && !isnull($\"df2.papercount\"),$\"df2.papercount\").otherwise($\"df1.papercount\").as(\"papercount\"),\n     when($\"df2.citationcount\"=!=0 && !isnull($\"df2.citationcount\"),$\"df2.citationcount\").otherwise($\"df1.citationcount\").as(\"citationcount\"),\n     when($\"df2.paperFamilyCount\"=!=0 && !isnull($\"df2.paperFamilyCount\"),$\"df2.paperFamilyCount\").otherwise($\"df1.paperFamilyCount\").as(\"paperFamilyCount\"),\n     when($\"df2.magrank\"=!=0 && !isnull($\"df2.magrank\"),$\"df2.magrank\").otherwise($\"df1.magrank\").as(\"magrank\"),\n              //array_join(array_union($\"df1.normalizedNamesArr\",$\"df2.normalizedNamesArr\"), \"||\").as(\"normalizedNamesAll\"),\n              //  array_join(array_union($\"df1.urlsArr\",$\"df2.urlsArr\"), \"||\").as(\"urlsAll\"), \n                ((size(array_intersect($\"df1.urlsArr\",$\"df2.urlsArr\")) / size(array_union($\"df1.urlsArr\",$\"df2.urlsArr\")))+\n                (size(array_intersect($\"df1.wikiPageUrlsArr\",$\"df2.wikiPageUrlsArr\")) / size(array_union($\"df1.wikiPageUrlsArr\",$\"df2.wikiPageUrlsArr\")))+\n                (size(array_intersect($\"df1.normalizedNamesArr\",$\"df2.normalizedNamesArr\")) / size(array_union($\"df1.normalizedNamesArr\",$\"df2.normalizedNamesArr\")))).as(\"jaccard\")\n         //, ($\"jaccurl\"+$\"jaccname\").as(\"jacc\")\n                \n                )\n        .orderBy($\"df2.name\")\n        .cache()\n\nprintln(name_based_matchesall.count())\nname_based_matchesall.show(false)\n",
   "user": "anonymous",
   "dateUpdated": "2021-03-20T18:13:57+0200",
   "config": {
    "title": true
   },
   "settings": {
    "params": {},
    "forms": {}
   },
   "apps": [],
   "runtimeInfos": {
    "jobUrl": {
     "propertyName": "jobUrl",
     "label": "SPARK JOB",
     "tooltip": "View in Spark web UI",
     "group": "spark",
     "values": [
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=54"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=56"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=57"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=58"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=59"
      }
     ],
     "interpreterSettingId": "spark"
    }
   },
   "progressUpdateIntervalMs": 500.0,
   "jobName": "paragraph_1616256837345_763743374",
   "id": "paragraph_1616256837345_763743374",
   "dateCreated": "2021-03-20T18:13:57+0200",
   "dateStarted": "2021-03-20T18:13:57+0200",
   "dateFinished": "2021-03-20T18:18:59+0200",
   "status": "FINISHED"
  },
  {
   "title": "Analyze Matched data",
   "text": "%spark\n\n\nval df22 = name_based_matchesall.select(countDistinct(\"ringgoldId\"))\ndf22.show(false)\n\nval df3 = name_based_matchesall.select(countDistinct(\"gridId\"))\ndf3.show(false)\n\nval df4 = name_based_matchesall.select(countDistinct(\"magId\"))\ndf4.show(false)\n\nval double_Grids = name_based_matchesall.groupBy($\"gridId\")\n  .agg(count(\"gridId\").alias(\"count\"))\n  .filter($\"count\">1)\n\nprintln(double_Grids.count())\n\nval double_Mag = name_based_matchesall.groupBy($\"magId\")\n  .agg(count(\"magId\").alias(\"count\"))\n  .filter($\"count\">1)\n\nprintln(double_Mag.count())",
   "user": "anonymous",
   "dateUpdated": "2021-03-20T18:21:08+0200",
   "config": {
    "title": true,
    "results": [
     {}
    ]
   },
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {
       "state": {
        "currentPage": "Console"
       }
      }
     }
    },
    "forms": {}
   },
   "apps": [],
   "runtimeInfos": {
    "jobUrl": {
     "propertyName": "jobUrl",
     "label": "SPARK JOB",
     "tooltip": "View in Spark web UI",
     "group": "spark",
     "values": [
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=60"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=61"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=62"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=63"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=64"
      }
     ],
     "interpreterSettingId": "spark"
    }
   },
   "progressUpdateIntervalMs": 500.0,
   "jobName": "paragraph_1616257268979_1544547740",
   "id": "paragraph_1616257268979_1544547740",
   "dateCreated": "2021-03-20T18:21:08+0200",
   "dateStarted": "2021-03-20T18:21:08+0200",
   "dateFinished": "2021-03-20T18:21:12+0200",
   "status": "FINISHED"
  },
  {
   "title": "Merge Grid - Ringgold",
   "text": "%spark\nimport org.apache.spark.sql.expressions.Window\n\nval window = Window.partitionBy(\"gridId\").orderBy(\"jaccard\")\n\nval dist_rows = name_based_matchesall.withColumn(\"row_num\", row_number().over(window))\n  .filter($\"row_num\" === 1)\n  .drop(\"row_num\").cache()\n\nval double_Grids = dist_rows.groupBy($\"gridId\")\n  .agg(count(\"gridId\").alias(\"count\"))\n  .filter($\"count\">1)\n\nprintln(double_Grids.count())\n//double_Grids.show(false)\n \nval ids2drop = dist_rows.select($\"affId2\".as(\"affId\")).union(dist_rows.select($\"affId1\".as(\"affId\")).distinct())\nprintln(ids2drop.count())\n\nprintln(institutionsdf.count())\n\nval remainingInstitutions = institutionsdf.join(ids2drop,ids2drop(\"affId\") === institutionsdf(\"affId\"), \"leftanti\") \n.select( $\"affId\", $\"ringgoldId\",$\"gridId\",$\"magId\", $\"name\",\n           $\"normalizedNamesArr\",    $\"urlsArr\",     $\"wikiPageUrlsArr\",\n           $\"acronymsArr\",  $\"fundrefIdsArr\",  $\"rorIdsArr\",   $\"wikiIdsArr\",\n     $\"email\", $\"city\",  $\"state\",  $\"countryCode\",   $\"postCode\",   $\"latitude\",    $\"longitude\",\n     $\"papercount\",     $\"citationcount\",     $\"paperFamilyCount\",     $\"magrank\")\n//select($\"affId\", $\"magId\",$\"gridId\",$\"ringgoldId\",$\"wikiIds\",$\"isniIds\" ,$\"rorIds\",$\"fundrefIds\", $\"name\", $\"normalizedNames\",$\"acronyms\", $\"urls\", $\"countryCode\", $\"papercount\")\n                      \nprintln(remainingInstitutions.count())\n\nval mergedInstances = dist_rows\n.select( \n         concat(when($\"magId\"=!=0 && !isnull($\"magId\"),$\"magId\").otherwise(\"\")\n         ,when($\"gridId\"=!=\"\" && !isnull($\"gridId\"), concat(lit(\"_\"), $\"gridId\")).otherwise(\"\")\n         ,when($\"ringgoldId\"=!=\"\" && !isnull($\"ringgoldId\"), concat(lit(\"_\"), $\"ringgoldId\")).otherwise(\"\")) \n    .as(\"affId\"),         \n    $\"ringgoldId\",$\"gridId\",$\"magId\", $\"name\",\n           $\"normalizedNamesArr\",    $\"urlsArr\",     $\"wikiPageUrlsArr\",\n           $\"acronymsArr\",  $\"fundrefIdsArr\",  $\"rorIdsArr\",   $\"wikiIdsArr\",\n     $\"email\", $\"city\",  $\"state\",  $\"countryCode\",   $\"postCode\",   $\"latitude\",    $\"longitude\",\n     $\"papercount\",     $\"citationcount\",     $\"paperFamilyCount\",     $\"magrank\")\n//.show(true)\n\nval  newInstitutionsdf =  remainingInstitutions.union(mergedInstances).cache()\n       \n       println(newInstitutionsdf.count())\n       newInstitutionsdf.show(true)\n       \n     //  newInsitutionsdf.select($\"affId\", $\"magId\",$\"gridId\",$\"ringgoldId\",$\"wikiIds\",$\"isniIds\" ,$\"rorIds\",$\"fundrefIds\", $\"name\", $\"normalizedNames\",$\"acronyms\", $\"urls\", $\"countryCode\", $\"papercount\").coalesce(1).write.mode(\"overwrite\").options(Map(\"sep\"->\",\", \"header\"-> \"true\")).csv(s\"$ORGS_HOME/PKGInstitutions.csv\")",
   "user": "anonymous",
   "dateUpdated": "2021-03-21T16:51:10+0200",
   "config": {
    "title": true,
    "results": [
     {}
    ]
   },
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {
       "state": {
        "currentPage": "Console",
        "chart": {
         "series": [
          {
           "type": "Line",
           "x": {
            "column": "affId",
            "index": 0.0
           },
           "y": {
            "column": "latitude",
            "index": 17.0
           }
          }
         ]
        }
       }
      }
     }
    },
    "forms": {}
   },
   "apps": [],
   "runtimeInfos": {
    "jobUrl": {
     "propertyName": "jobUrl",
     "label": "SPARK JOB",
     "tooltip": "View in Spark web UI",
     "group": "spark",
     "values": [
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=269"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=270"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=271"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=273"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=274"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=275"
      }
     ],
     "interpreterSettingId": "spark"
    }
   },
   "progressUpdateIntervalMs": 500.0,
   "jobName": "paragraph_1616338270161_407408359",
   "id": "paragraph_1616338270161_407408359",
   "dateCreated": "2021-03-21T16:51:10+0200",
   "dateStarted": "2021-03-21T16:51:10+0200",
   "dateFinished": "2021-03-21T16:51:12+0200",
   "status": "FINISHED"
  },
  {
   "title": "Name based matching on unmatched MAG",
   "text": "%spark\nimport org.apache.spark.sql.functions._\n\nval unmatchedMag = newInstitutionsdf\n.filter(\n        \n       ($\"magId\"=!=0 && !isnull($\"magId\") \n        && ($\"ringgoldId\"===\"\" || isnull($\"ringgoldId\"))\n        && ($\"gridId\"===\"\" || isnull($\"gridId\"))) \n            )        \n        .orderBy($\"paperCount\" desc)\n        .cache()\nunmatchedMag.show(false)\nprintln(unmatchedMag.count())\n\nval name_based_matches_mag = newInstitutionsdf.filter($\"magId\"===\"\" || isnull($\"magId\") ).as(\"df1\").join(broadcast(unmatchedMag.as(\"df2\")),  \n    arrays_overlap($\"df1.normalizedNamesArr\",$\"df2.normalizedNamesArr\") && $\"df1.affId\" =!=$\"df2.affId\" \n            && (arrays_overlap($\"df1.urlsArr\",$\"df2.urlsArr\") || arrays_overlap($\"df1.wikiPageUrlsArr\",$\"df2.wikiPageUrlsArr\")) \n&& $\"df2.countryCode\" === $\"df1.countryCode\"\n    , \"inner\")\n .select( $\"df2.affId\".as(\"affId2\"), \n     $\"df1.ringgoldId\".as(\"ringgoldId\"),$\"df1.gridId\".as(\"gridId\"),\n     when($\"df2.magId\"=!=0 && !isnull($\"df2.magId\"),$\"df2.magId\").otherwise($\"df1.magId\").as(\"magId\"),    \n     \n     $\"df1.affId\".as(\"affId1\"),  $\"df2.name\".as(\"name\"), $\"df1.name\".as(\"name1\"),   \n     \n             array_union($\"df1.normalizedNamesArr\",$\"df2.normalizedNamesArr\").as(\"normalizedNamesArr\"),\n            array_union($\"df1.urlsArr\",$\"df2.urlsArr\").as(\"urlsArr\"),\n            array_union($\"df1.wikiPageUrlsArr\",$\"df2.wikiPageUrlsArr\").as(\"wikiPageUrlsArr\"),\n            array_union($\"df1.acronymsArr\",$\"df2.acronymsArr\").as(\"acronymsArr\"),\n        array_union($\"df1.fundrefIdsArr\",$\"df2.fundrefIdsArr\").as(\"fundrefIdsArr\"),\n        array_union($\"df1.rorIdsArr\",$\"df2.rorIdsArr\").as(\"rorIdsArr\"),\n        array_union($\"df1.wikiIdsArr\",$\"df2.wikiIdsArr\").as(\"wikiIdsArr\"),\n     when($\"df2.email\"=!=0 && !isnull($\"df2.email\"),$\"df2.email\").otherwise($\"df1.email\").as(\"email\"),\n     when($\"df2.city\"=!=0 && !isnull($\"df2.city\"),$\"df2.city\").otherwise($\"df1.city\").as(\"city\"),\n     when($\"df2.state\"=!=0 && !isnull($\"df2.state\"),$\"df2.state\").otherwise($\"df1.state\").as(\"state\"),\n     $\"df2.countryCode\".as(\"countryCode\"),\n     when($\"df2.postCode\"=!=0 && !isnull($\"df2.postCode\"),$\"df2.postCode\").otherwise($\"df1.postCode\").as(\"postCode\"),\n     when($\"df2.latitude\"=!=0 && !isnull($\"df2.latitude\"),$\"df2.latitude\").otherwise($\"df1.latitude\").as(\"latitude\"),\n     when($\"df2.longitude\"=!=0 && !isnull($\"df2.longitude\"),$\"df2.longitude\").otherwise($\"df1.longitude\").as(\"longitude\"),\n     when($\"df2.papercount\"=!=0 && !isnull($\"df2.papercount\"),$\"df2.papercount\").otherwise($\"df1.papercount\").as(\"papercount\"),\n     when($\"df2.citationcount\"=!=0 && !isnull($\"df2.citationcount\"),$\"df2.citationcount\").otherwise($\"df1.citationcount\").as(\"citationcount\"),\n     when($\"df2.paperFamilyCount\"=!=0 && !isnull($\"df2.paperFamilyCount\"),$\"df2.paperFamilyCount\").otherwise($\"df1.paperFamilyCount\").as(\"paperFamilyCount\"),\n     when($\"df2.magrank\"=!=0 && !isnull($\"df2.magrank\"),$\"df2.magrank\").otherwise($\"df1.magrank\").as(\"magrank\"),\n               \n                ((size(array_intersect($\"df1.urlsArr\",$\"df2.urlsArr\")) / size(array_union($\"df1.urlsArr\",$\"df2.urlsArr\")))+\n                (size(array_intersect($\"df1.wikiPageUrlsArr\",$\"df2.wikiPageUrlsArr\")) / size(array_union($\"df1.wikiPageUrlsArr\",$\"df2.wikiPageUrlsArr\")))+\n                (size(array_intersect($\"df1.normalizedNamesArr\",$\"df2.normalizedNamesArr\")) / size(array_union($\"df1.normalizedNamesArr\",$\"df2.normalizedNamesArr\")))).as(\"jaccard\")\n         //, ($\"jaccurl\"+$\"jaccname\").as(\"jacc\")\n                \n                )\n        .orderBy($\"df2.papercount\")\n        .cache()\n\nprintln(name_based_matches_mag.count())\nname_based_matches_mag.show(false)\n//4400\n//548",
   "user": "anonymous",
   "dateUpdated": "2021-03-21T16:52:15+0200",
   "config": {
    "title": true,
    "results": [
     {}
    ]
   },
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {
       "state": {
        "currentPage": "Table",
        "chart": {
         "series": [
          {
           "type": "Line",
           "x": {
            "column": "papercount",
            "index": 19.0
           },
           "y": {
            "column": "affId",
            "index": 0.0
           }
          }
         ]
        }
       }
      }
     }
    },
    "forms": {}
   },
   "apps": [],
   "runtimeInfos": {
    "jobUrl": {
     "propertyName": "jobUrl",
     "label": "SPARK JOB",
     "tooltip": "View in Spark web UI",
     "group": "spark",
     "values": [
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=276"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=277"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=278"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=279"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=280"
      }
     ],
     "interpreterSettingId": "spark"
    }
   },
   "progressUpdateIntervalMs": 500.0,
   "jobName": "paragraph_1616338335587_1923499709",
   "id": "paragraph_1616338335587_1923499709",
   "dateCreated": "2021-03-21T16:52:15+0200",
   "dateStarted": "2021-03-21T16:52:15+0200",
   "dateFinished": "2021-03-21T16:52:17+0200",
   "status": "FINISHED"
  },
  {
   "text": "%spark\nval df22 = name_based_matches_mag.select(countDistinct(\"ringgoldId\"))\ndf22.show(false)\n\nval df3 = name_based_matches_mag.select(countDistinct(\"gridId\"))\ndf3.show(false)\n\nval df4 = name_based_matches_mag.select(countDistinct(\"magId\"))\ndf4.show(false)\n\nval double_Grids = name_based_matches_mag.groupBy($\"gridId\")\n  .agg(count(\"gridId\").alias(\"count\"))\n  .filter($\"count\">1)\n\nprintln(double_Grids.count())\n\nval double_Mag = name_based_matches_mag.groupBy($\"magId\")\n  .agg(count(\"magId\").alias(\"count\"))\n  .filter($\"count\">1)\n\nprintln(double_Mag.count())\n\nval double_ringgoldId= name_based_matches_mag.groupBy($\"ringgoldId\")\n  .agg(count(\"ringgoldId\").alias(\"count\"))\n  .filter($\"count\">1)\n\nprintln(double_ringgoldId.count())\n\n",
   "user": "anonymous",
   "dateUpdated": "2021-03-21T16:43:52+0200",
   "config": {
    "results": [
     {}
    ]
   },
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {
       "state": {
        "currentPage": "Console"
       }
      }
     }
    },
    "forms": {}
   },
   "apps": [],
   "runtimeInfos": {
    "jobUrl": {
     "propertyName": "jobUrl",
     "label": "SPARK JOB",
     "tooltip": "View in Spark web UI",
     "group": "spark",
     "values": [
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=253"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=254"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=255"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=256"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=257"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=258"
      }
     ],
     "interpreterSettingId": "spark"
    }
   },
   "progressUpdateIntervalMs": 500.0,
   "jobName": "paragraph_1616337832248_2047494183",
   "id": "paragraph_1616337832248_2047494183",
   "dateCreated": "2021-03-21T16:43:52+0200",
   "dateStarted": "2021-03-21T16:43:52+0200",
   "dateFinished": "2021-03-21T16:43:57+0200",
   "status": "FINISHED"
  },
  {
   "title": "Merge matched MAG",
   "text": "%spark\n\nimport org.apache.spark.sql.expressions.Window\n\nval window = Window.partitionBy(\"magId\").orderBy(\"jaccard\")\n\nval dist_rows_mag = name_based_matches_mag.withColumn(\"row_num\", row_number().over(window))\n  .filter($\"row_num\" === 1)\n  .drop(\"row_num\").cache()\n\n \nprintln(\"dist_rows_mag:\"+dist_rows_mag.count())\n\nval ids2drop_mag = dist_rows_mag.select($\"affId2\".as(\"affId\")).union(dist_rows_mag.select($\"affId1\".as(\"affId\")).distinct())\n\nprintln(\"ids2drop_mag:\"+ids2drop_mag.count())\nprintln(\"newInstitutionsdf:\"+newInstitutionsdf.count())\n\nval remainingInstitutions_mag = newInstitutionsdf.join(ids2drop_mag,ids2drop_mag(\"affId\") === newInstitutionsdf(\"affId\"), \"leftanti\") \n.select( $\"affId\", $\"ringgoldId\",$\"gridId\",$\"magId\", $\"name\",\n           $\"normalizedNamesArr\",    $\"urlsArr\",     $\"wikiPageUrlsArr\",\n           $\"acronymsArr\",  $\"fundrefIdsArr\",  $\"rorIdsArr\",   $\"wikiIdsArr\",\n     $\"email\", $\"city\",  $\"state\",  $\"countryCode\",   $\"postCode\",   $\"latitude\",    $\"longitude\",\n     $\"papercount\",     $\"citationcount\",     $\"paperFamilyCount\",     $\"magrank\")\n\n                      \nprintln(\"remainingInstitutions_mag:\"+remainingInstitutions_mag.count())\n\n          \nval mergedInstances_mag = dist_rows_mag\n.select( \n    concat(when($\"magId\"=!=0 && !isnull($\"magId\"),$\"magId\").otherwise(\"\")\n         ,when($\"gridId\"=!=\"\" && !isnull($\"gridId\"), concat(lit(\"_\"), $\"gridId\")).otherwise(\"\")\n         ,when($\"ringgoldId\"=!=\"\" && !isnull($\"ringgoldId\"), concat(lit(\"_\"), $\"ringgoldId\")).otherwise(\"\")) \n    .as(\"affId\"),                  \n    $\"ringgoldId\",$\"gridId\",$\"magId\", $\"name\",\n           $\"normalizedNamesArr\",    $\"urlsArr\",     $\"wikiPageUrlsArr\",\n           $\"acronymsArr\",  $\"fundrefIdsArr\",  $\"rorIdsArr\",   $\"wikiIdsArr\",\n     $\"email\", $\"city\",  $\"state\",  $\"countryCode\",   $\"postCode\",   $\"latitude\",    $\"longitude\",\n     $\"papercount\",     $\"citationcount\",     $\"paperFamilyCount\",     $\"magrank\")\n//.show(true)\n\nval  newInstitutionsdf_full =  remainingInstitutions_mag.union(mergedInstances_mag)\n        .withColumn(\"normalizedNames\",array_join($\"normalizedNamesArr\", \"||\"))\n          .withColumn(\"wikiPageUrls\",array_join($\"wikiPageUrlsArr\", \"||\"))\n          .withColumn(\"urls\",array_join($\"urlsArr\", \"||\"))\n          .withColumn(\"acronyms\",array_join($\"acronymsArr\", \"||\"))\n          .withColumn(\"fundrefIds\",array_join($\"fundrefIdsArr\", \"||\"))\n          .withColumn(\"rorIds\",array_join($\"rorIdsArr\", \"||\"))\n          .withColumn(\"wikiIds\",array_join($\"wikiIdsArr\", \"||\"))\n          .withColumn(\"urls\",array_join($\"urlsArr\", \"||\"))\n        .cache()\n    \nprintln(\"newInstitutionsdf_full:\"+newInstitutionsdf_full.count())\nnewInstitutionsdf_full.show(false)\n            \n//newInstitutionsdf_full.write.mode(\"overwrite\").parquet(s\"$ORGS_HOME/newInstitutions.parquet\")",
   "user": "anonymous",
   "dateUpdated": "2021-03-21T16:55:12+0200",
   "config": {
    "title": true,
    "results": [
     {}
    ]
   },
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {
       "state": {
        "currentPage": "Console",
        "chart": {
         "series": [
          {
           "type": "Line",
           "x": {
            "column": "affId",
            "index": 0.0
           },
           "y": {
            "column": "latitude",
            "index": 17.0
           }
          }
         ]
        }
       }
      }
     }
    },
    "forms": {}
   },
   "apps": [],
   "runtimeInfos": {
    "jobUrl": {
     "propertyName": "jobUrl",
     "label": "SPARK JOB",
     "tooltip": "View in Spark web UI",
     "group": "spark",
     "values": [
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=281"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=282"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=283"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=285"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=287"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=288"
      }
     ],
     "interpreterSettingId": "spark"
    }
   },
   "progressUpdateIntervalMs": 500.0,
   "jobName": "paragraph_1616338512326_2018344210",
   "id": "paragraph_1616338512326_2018344210",
   "dateCreated": "2021-03-21T16:55:12+0200",
   "dateStarted": "2021-03-21T16:55:12+0200",
   "dateFinished": "2021-03-21T16:55:19+0200",
   "status": "FINISHED"
  },
  {
   "settings": {
    "params": {},
    "forms": {}
   },
   "apps": [],
   "status": "READY",
   "text": "%spark\nnewInstitutionsdf_full.write.mode(\"overwrite\").parquet(s\"$ORGS_HOME/newInstitutions.parquet\")\n\nnewInstitutionsdf_full\n        .select($\"affId\", $\"ringgoldId\",$\"gridId\",$\"magId\", $\"name\",\n           $\"normalizedNames\",    $\"urls\",     $\"wikiPageUrls\",\n           $\"acronyms\",  $\"fundrefIds\",  $\"rorIds\",   $\"wikiIds\",\n     $\"email\", $\"city\",  $\"state\",  $\"countryCode\",   $\"postCode\",   $\"latitude\",    $\"longitude\",\n     $\"papercount\",     $\"citationcount\",     $\"paperFamilyCount\",     $\"magrank\")\n        .coalesce(1).write.mode(\"overwrite\").options(Map(\"sep\"->\",\", \"header\"-> \"true\")).csv(s\"$ORGS_HOME/PKGInstitutions.csv\")\n\nnewInstitutionsdf_full\n        .select($\"affId\", $\"ringgoldId\",$\"gridId\",$\"magId\",   $\"wikiIds\", $\"name\",           \n           $\"acronyms\",  $\"fundrefIds\",  $\"rorIds\", \n       $\"countryCode\", \n     $\"papercount\")\n        .coalesce(1).write.mode(\"overwrite\").options(Map(\"sep\"->\",\", \"header\"-> \"true\")).csv(s\"$ORGS_HOME/PKGInstitutions_basic.csv\")",
   "id": "",
   "config": {}
  },
  {
   "text": "%spark\n//newInsitutionsdf_full.filter($\"magId\"===\"9467721\").show(false)\nval df22 = newInstitutionsdf_full.select(countDistinct(\"ringgoldId\"))\ndf22.show(false)\n\nval df3 = newInstitutionsdf_full.select(countDistinct(\"gridId\"))\ndf3.show(false)\n\nval df4 = newInstitutionsdf_full.select(countDistinct(\"magId\"))\ndf4.show(false)\n\nval double_Grids = newInstitutionsdf_full.groupBy($\"gridId\")\n  .agg(count(\"gridId\").alias(\"count\"))\n  .filter($\"count\">1)\n\nprintln(double_Grids.count())\n\nval double_Mag = newInstitutionsdf_full.groupBy($\"magId\")\n  .agg(count(\"magId\").alias(\"count\"))\n  .filter($\"count\">1)\n\nprintln(double_Mag.count())\n\nval double_ringgoldId= newInstitutionsdf_full.groupBy($\"ringgoldId\")\n  .agg(count(\"ringgoldId\").alias(\"count\"))\n  .filter($\"count\">1)\n\nprintln(double_ringgoldId.count())\n\n\nprintln(\"newInstitutionsdf_full:\"+newInstitutionsdf_full.count())\nprintln(\"newInstitutionsdf_full_100pubs:\"+newInstitutionsdf_full.filter($\"paperCount\">100).count())\n\nval unMatchedMAG = newInstitutionsdf_full\n.filter(\n    ($\"gridId\"===\"\" || isnull($\"gridId\"))\n     && ($\"ringgoldId\"===\"\" || isnull($\"ringgoldId\"))        \n        &&  $\"magId\"=!=0 && !isnull($\"magId\")\n        //&& $\"paperCount\" > 1000\n            )        \n        .orderBy($\"paperCount\" desc)\n        .cache()\n\nunMatchedMAG.show(20)\nprintln(\"unMatchedMAG:\"+unMatchedMAG.count())\nprintln(\"unMatchedMAG_100pubs:\"+unMatchedMAG.filter($\"paperCount\">100).count())\n\n\n\n\nval grid_noRing = newInstitutionsdf_full\n.filter(\n    $\"gridId\"=!=\"\" && !isnull($\"gridId\")\n \n        && ($\"ringgoldId\"===\"\" || isnull($\"ringgoldId\")) \n            )        \n        .orderBy($\"paperCount\" desc)\n        .cache()\ngrid_noRing.show(true)\nprintln(\"grid_noRing:\"+grid_noRing.count())\nprintln(\"grid_noRing_100pubs:\"+grid_noRing.filter($\"paperCount\">100).count())\n\n\nval noRing = newInstitutionsdf_full\n.filter(\n    $\"ringgoldId\"===\"\" || isnull($\"ringgoldId\") \n            )        \n        .orderBy($\"paperCount\" desc)\n        .cache()\ngrid_noRing.show(true)\nprintln(\"noRing:\"+noRing.count())\nprintln(\"noRing_100pubs:\"+noRing.filter($\"paperCount\">100).count())\n\n\n//newInsitutionsdf_full.filter(array_contains($\"normalizedNamesArr\",\"university of paris\")).show(false)\n",
   "user": "anonymous",
   "dateUpdated": "2021-03-21T17:11:23+0200",
   "config": {
    "results": [
     {}
    ]
   },
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {
       "state": {}
      }
     }
    },
    "forms": {}
   },
   "apps": [],
   "runtimeInfos": {
    "jobUrl": {
     "propertyName": "jobUrl",
     "label": "SPARK JOB",
     "tooltip": "View in Spark web UI",
     "group": "spark",
     "values": [
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=289"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=290"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=291"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=292"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=293"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=294"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=295"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=296"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=297"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=298"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=299"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=300"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=301"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=302"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=303"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=304"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=305"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=306"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=307"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=308"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=309"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=310"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=311"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=312"
      }
     ],
     "interpreterSettingId": "spark"
    }
   },
   "progressUpdateIntervalMs": 500.0,
   "jobName": "paragraph_1616339483179_1421113444",
   "id": "paragraph_1616339483179_1421113444",
   "dateCreated": "2021-03-21T17:11:23+0200",
   "dateStarted": "2021-03-21T17:11:23+0200",
   "dateFinished": "2021-03-21T17:11:42+0200",
   "status": "FINISHED"
  },
  {
   "title": "Analyze problematic cases",
   "text": "%spark\n\n    \n/*\nnewInstitutionsdf_full.write.mode(\"overwrite\").parquet(s\"$ORGS_HOME/newInstitutions.parquet\")\n\nnewInstitutionsdf_full\n        .select($\"affId\", $\"ringgoldId\",$\"gridId\",$\"magId\", $\"name\",\n           $\"normalizedNames\",    $\"urls\",     $\"wikiPageUrls\",\n           $\"acronyms\",  $\"fundrefIds\",  $\"rorIds\",   $\"wikiIds\",\n     $\"email\", $\"city\",  $\"state\",  $\"countryCode\",   $\"postCode\",   $\"latitude\",    $\"longitude\",\n     $\"papercount\",     $\"citationcount\",     $\"paperFamilyCount\",     $\"magrank\")\n        .coalesce(1).write.mode(\"overwrite\").options(Map(\"sep\"->\",\", \"header\"-> \"true\")).csv(s\"$ORGS_HOME/PKGInstitutions.csv\")\n\nnewInstitutionsdf_full\n        .select($\"affId\", $\"ringgoldId\",$\"gridId\",$\"magId\",   $\"wikiIds\", $\"name\",           \n           $\"acronyms\",  $\"fundrefIds\",  $\"rorIds\", \n       $\"countryCode\", \n     $\"papercount\")\n        .coalesce(1).write.mode(\"overwrite\").options(Map(\"sep\"->\",\", \"header\"-> \"true\")).csv(s\"$ORGS_HOME/PKGInstitutions_basic.csv\")\n*/\nval ORGS_HOME = \"/media/ometaxas/nvme/datasets/institutions\"\nval newInstitutionsdf_full = spark.read.parquet(s\"$ORGS_HOME/newInstitutions.parquet\")\n\nval  cases = newInstitutionsdf_full\n.filter( \n    $\"normalizedNames\".contains(\"epsom and st helier university hospitals nhs trust\")  ||                        \n            $\"normalizedNames\".contains(\"barking havering and redbridge university hospitals nhs trust\") ||\n            $\"ringgoldid\"===\"6965\" ||   $\"ringgoldid\"===\"3237\" ||$\"ringgoldid\"===\"574519\" ||$\"ringgoldid\"===\"462587\" ||$\"ringgoldid\"===\"89542\" ||\n            $\"ringgoldid\"===\"2102\" ||$\"ringgoldid\"===\"98549\" ||$\"ringgoldid\"===\"92956\" ||$\"ringgoldid\"===\"122639\" ||$\"ringgoldid\"===\"2284\" ||\n            $\"ringgoldid\"===\"9898\" ||            \n            $\"gridId\"===\"grid.419496.7\" || $\"gridId\"===\"grid.493155.f\" || $\"gridId\"===\"grid.479983.8\" || $\"gridId\"===\"grid.508061.a\" || $\"gridId\"===\"grid.472379.c\" ||  \n            $\"gridId\"===\"grid.411255.6\" || $\"gridId\"===\"grid.439632.9\" || $\"gridId\"===\"grid.508499.9\" || $\"gridId\"===\"grid.501174.6\" || $\"gridId\"===\"grid.493150.a\" ||\n            $\"gridId\"===\"grid.412148.a\" || $\"gridId\"===\"grid.493132.e\" || $\"gridId\"===\"grid.451504.1\" || $\"gridId\"===\"grid.8155.9\" || $\"gridId\"===\"grid.449961.7\" ||\n            $\"gridId\"===\"grid.439752.e\" ||         \n            array_contains($\"normalizedNamesArr\",\"health protection research unit in emerging and zoonotic infections at university of liverpool\") || \n            array_contains($\"normalizedNamesArr\",\"aintree university hospital\") ||   \n            $\"normalizedNames\".contains(\"aintree university hospital\") ||\n     array_contains($\"normalizedNamesArr\",\"university of wales\") ||\n            $\"normalizedNames\".contains(\"harold wood hospital\") ||\n            \n             \n    array_contains($\"normalizedNamesArr\",\"university hospitals of north midlands nhs trust\") || \n            //|| array_contains($\"wikiIdsArr\",\"Q1155944\") || array_contains($\"wikiIdsArr\",\"Q1235608\") || \n    array_contains($\"normalizedNamesArr\",\"university of hassan ii casablanca\") ||\n    array_contains($\"normalizedNamesArr\",\"university college hospital at westmoreland street\") ||\n    array_contains($\"normalizedNamesArr\",\"schiller international university\")      \n             \n            ).select($\"affId\", $\"ringgoldId\",$\"gridId\",$\"magId\", $\"wikiIds\", $\"name\",  $\"fundrefIds\",  $\"rorIds\",    \n           $\"normalizedNames\",    $\"urls\",     $\"wikiPageUrls\",\n           $\"acronyms\", \n      $\"countryCode\",\n     $\"papercount\" ).cache()\n\n      cases.show()      \n        cases.coalesce(1).write.mode(\"overwrite\").options(Map(\"sep\"->\",\", \"header\"-> \"true\")).csv(s\"$ORGS_HOME/cases.csv\")\n\n",
   "user": "anonymous",
   "dateUpdated": "2021-03-25T11:15:09+0200",
   "config": {
    "title": true,
    "results": [
     {}
    ]
   },
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {
       "state": {
        "currentPage": "Table",
        "table": {
         "columnWidths": {
          "urls": 255.0,
          "normalizedNames": 266.0,
          "name": 190.0
         }
        }
       }
      }
     }
    },
    "forms": {}
   },
   "apps": [],
   "runtimeInfos": {
    "jobUrl": {
     "propertyName": "jobUrl",
     "label": "SPARK JOB",
     "tooltip": "View in Spark web UI",
     "group": "spark",
     "values": [
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=29"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=30"
      },
      {
       "jobUrl": "http://omiros.station:4040/jobs/job?id=31"
      }
     ],
     "interpreterSettingId": "spark"
    }
   },
   "progressUpdateIntervalMs": 500.0,
   "jobName": "paragraph_1616663709401_441208152",
   "id": "paragraph_1616663709401_441208152",
   "dateCreated": "2021-03-25T11:15:09+0200",
   "dateStarted": "2021-03-25T11:15:09+0200",
   "dateFinished": "2021-03-25T11:15:13+0200",
   "status": "FINISHED"
  }
 ],
 "name": "Zeppelin Notebook",
 "id": "",
 "noteParams": {},
 "noteForms": {},
 "angularObjects": {},
 "config": {
  "isZeppelinNotebookCronEnable": false,
  "looknfeel": "default",
  "personalizedMode": "false"
 },
 "info": {}
}